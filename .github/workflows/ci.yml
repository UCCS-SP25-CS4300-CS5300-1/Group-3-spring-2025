name: CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]


jobs:
  ################################################################
  # 1. AI Code Review (Using OpenAI API)
  ################################################################
  ai-code-review:
    name: AI Code Review
    # We only need to run this on pull requests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    timeout-minutes: 5
    strategy:
      fail-fast: false

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # (A) Get the diff of changes
      - name: Get PR diff
        id: diff
        run: |
          git fetch origin main
          MERGE_BASE=$(git merge-base origin/main HEAD || true)
          if [ -z "$MERGE_BASE" ]; then
            DIFF=$(git diff origin/main HEAD)
          else
            DIFF=$(git diff $MERGE_BASE HEAD)
          fi
          
        
          ENCODED_DIFF=$(echo "$DIFF" | base64 -w 0)
          echo "diff=$ENCODED_DIFF" >> $GITHUB_OUTPUT

      # (B) Set up OpenAI API key from GitHub Secrets
      - name: Set up OpenAI API key
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

      # (C) Install OpenAI Python client
      - name: Install OpenAI Python client
        run: |
          pip install openai

      # (D) Call OpenAI API with the diff (Python script)
      - name: AI Code Review
        run: |
          python group3_project/calendar/scripts/review_script.py "${{ steps.diff.outputs.diff }}"

  ################################################################
  # 2. Automated Tests + Coverage
  ################################################################
  test:
    name: Run Tests & Report Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Django env
        run: |
          source group3_project/bin/activate

      - name: Run tests with coverage
        run: |
          cd group3_project/calendar
          coverage run manage.py test
          coverage report -m

  ################################################################
  # 3. Linting with Flake8
  ################################################################
  lint:
    name: Lint Code with Flake8
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8-coverage

      - name: Flake8 run
        run: |
          flake8 group3_project/calendar --count --select=E9,F7 --show-source --statistics --max-complexity=50 --max-line-length=127 --cov=group3_project/calendar --cov-report=term-missing
  # NOTE: 1st command is strict rules wise, will fail the job if real issues are there
  # What the commands are doing, --count: Prints the total number of issues found at the end of the run
  # --statistics: Shows a summary of the number of times each error or warning appears
  # --select=E9,F7: 
  # E9, all E9xx codes, runtime errors
  # F7, all F7xx codes: Checks problems with control flow statements and catches some syntax errors
  # --show-source:  Shows the line of code where an issue was found.
  # --max-complexity=10: Flags functions that are "too complex", where complexity is cyclomatic complexity > 10
  # --max-line-length=127: Flags lines longer than 127 characters. 2^7. We're doing web stuff, some lines are long, but there should be a limit.

  #Here is a link for all of the 'E' codes: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  #Here is a link for most of the 'F' codes: https://flake8.pycqa.org/en/latest/user/error-codes.html

################################################################
# 4. Dependency Vulnerability Scan
################################################################
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Safety Scan
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          requirements: group3_project/calendar/requirements.txt

################################################################
# 5. seeing what openai version can be used
################################################################
  check-models:
    name: Check Usable OpenAI Models
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install openai

      - name: Run model listing script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python group3_project/calendar/scripts/list_models.py
